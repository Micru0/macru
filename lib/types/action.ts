import { z } from 'zod';

// --- Action Request Schema (consider moving from route.ts if shared) ---
export const actionRequestSchema = z.object({
  type: z.string().min(1), // e.g., 'notion.createPage', 'test.logMessage'
  parameters: z.record(z.any()), // Action-specific parameters, validated by executor
  metadata: z.record(z.any()).optional(), // Optional info like source, user intent
});

export type ActionRequest = z.infer<typeof actionRequestSchema>;

// --- Proposed Action (from LLM to UI) ---
// This represents the structure the UI components expect when an LLM proposes an action.
export type ProposedActionType = {
  id: string; // Unique ID for this proposal instance (can be generated by LLM or frontend)
  type: string; // Corresponds to ActionRequest type (e.g., 'notion.createPage')
  parameters: Record<string, any>; // Corresponds to ActionRequest parameters
  description?: string; // User-friendly description of the action (potentially LLM-generated)
  riskLevel?: 'low' | 'medium' | 'high'; // Estimated risk (potentially LLM-generated or mapped from type)
  warnings?: string[]; // Specific warnings for the user (potentially LLM-generated)
  // May include other relevant metadata provided by the LLM
};

// --- Action Execution Result --- 
export interface ActionResult {
  success: boolean;
  message?: string; // User-facing message
  data?: any; // Optional result data from the action
  error?: string; // Error message if success is false
}

// --- Action Executor Interface ---
export interface ActionExecutor {
  /**
   * Executes the action based on the provided parameters.
   * Should handle validation of specific parameters for its action type.
   * @param parameters - The parameters specific to this action type.
   * @param userId - The ID of the user requesting the action.
   * @param metadata - Optional metadata associated with the request.
   * @returns ActionResult indicating success or failure.
   */
  execute(parameters: Record<string, any>, userId: string, metadata?: Record<string, any>): Promise<ActionResult>;

  /**
   * Optional: Rolls back the action if possible.
   * Only required for actions that have side effects that need undoing.
   * @param parameters - Parameters used during execution.
   * @param executionResult - The result from the initial execute call.
   * @param userId - The ID of the user.
   * @returns ActionResult indicating rollback success/failure.
   */
  rollback?(parameters: Record<string, any>, executionResult: ActionResult, userId: string): Promise<ActionResult>;
} 